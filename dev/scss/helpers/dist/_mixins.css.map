{"version":3,"names":[],"mappings":"","sources":["_mixins.scss"],"sourcesContent":["/* =============\n    Mixins\n============= */\n@use \"sass:math\";\n/* ---------------- Font Sizing ---------------- */\n// ----\n// rem mixins\n// ----\n$rem-base: 16px !default; // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n@function rem-separator($list) {\n    @if function-exists(\"list-separator\")==true {\n        @return list-separator($list);\n    }\n    $test-list: ();\n    @each $item in $list {\n        $test-list: append($test-list, $item, space);\n    }\n    @return if($test-list==$list, space, comma);\n}\n@mixin rem-base($zoom: 100%) {\n    //font-size: $zoom / 16px * $rem-base;\n\n}\n@function rem-convert($to, $values...) {\n    $result: ();\n    $separator: rem-separator($values);\n    @each $value in $values {\n        @if type-of($value)== \"number\" and unit($value)==\"rem\" and $to==\"px\" {\n            // $result: append($result, $value / 1rem * $rem-base, $separator);\n           \n        } @else\n        if type-of($value)==\"number\" and unit($value)==\"px\" and $to==\"rem\" {\n            // $result: append($result, $value / ($rem-base / 1rem), $separator);\n        } @else\n        if type-of($value)==\"list\" {\n            $result: append($result, rem-convert($to, $value...), $separator);\n        } @else {\n            $result: append($result, $value, $separator);\n        }\n    }\n    @return if(length($result)==1, nth($result, 1), $result);\n}\n@function rem($values...) {\n    @return rem-convert(rem, $values...);\n}\n@mixin rem($properties, $values...) {\n    @if type-of($properties)== \"map\" {\n        @each $property in map-keys($properties) {\n            @include rem($property, map-get($properties, $property));\n        }\n    } @else {\n        @each $property in $properties {\n            #{$property}: rem-convert(rem, $values...);\n        }\n    }\n}\n// $base-font-size: 100% !default;\n// //$base-line-height is 24px while $base-font-size is 16px\n// $base-line-height: 150%;\n// It strips the unit of measure and returns it\n@function strip-unit($num) {\n    // @return $num / ($num * 0 + 1);\n\n}\n// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of em\\'s.\n// Call with 1, 2, 3 or 4 parameters, \\'px\\' is not required but supported\n// rem-calc(10 20 30px 40);\n// Space delimited, if you want to delimit using comma\\'s, wrap it in another pair of brackets\n// rem-calc((10, 20, 30, 40px));\n// Optionally call with a different base (eg: 8px) to calculate em.\n// rem-calc(16px 32px 48px, 8px);\n// If you require to comma separate your list\n// rem-calc((16px, 32px, 48), 8px);\n@function convert-to-rem($value, $base-value: $rem-base) {\n    // $value: strip-unit($value) / strip-unit($base-value) * 1rem;\n    @if ($value==0rem) {\n        $value: 0;\n    }\n    // Turn 0em into 0\n    @return $value;\n}\n@function rem-calc($values, $base-value: $rem-base) {\n    $max: length($values);\n    @if $max==1 {\n        @return convert-to-rem(nth($values, 1), $base-value);\n    }\n    $remValues: ();\n    @for $i from 1 through $max {\n        $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));\n    }\n    @return $remValues;\n}\n\nhtml {\n    @include rem-base;\n}\n\n\n\n\n/* ---------------- Media Queries ---------------- */\n// Small devices\n@mixin sm {\n    @media (min-width: #{$screen-sm-min}) {\n        @content;\n    }\n}\n//Usage\n// @include sm{\n//     grid-template-columns: 100%;\n// }\n\n\n// Medium devices\n@mixin md {\n    @media (min-width: #{$screen-md-min}) {\n        @content;\n    }\n}\n//Usage\n// @include breakpoint (md){\n//     grid-template-columns: 20% 80%;\n// }\n\n\n// Large devices\n@mixin lg {\n    @media (min-width: #{$screen-lg-min}) {\n        @content;\n    }\n}\n//Usage\n// @include lg{\n//     grid-template-columns: repeat(3, 1fr);\n// }\n\n\n// Extra large devices\n@mixin xl {\n    @media (min-width: #{$screen-xl-min}) {\n        @content;\n    }\n}\n//Usage\n// @include xl{\n//     grid-template-columns: repeat(4, 1fr);\n// }\n\n// Super Extra large devices\n@mixin xxl {\n    @media (min-width: #{$screen-xxl-min}) {\n        @content;\n    }\n}\n\n"],"file":"_mixins.css"}